name: CI/CD

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GHCR
        run: echo ${{ secrets.GHCR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker buildx build --platform linux/amd64 -t ghcr.io/ktb-community/ktb-community-be:latest --push .

  deploy:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: Prepare SSH KEY
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 --decode > key.pem
          chmod 600 key.pem

      - name: SSH into EC2 and pull/run container
        run: |
          HOST=${{ secrets.EC2_HOST }}
          USER=${{ secrets.EC2_USER }}
          
          ssh -o StrictHostKeyChecking=no -i key.pem $USER@$HOST "docker service rm ktb-community-be || true"
          ssh -o StrictHostKeyChecking=no -i key.pem $USER@$HOST "docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GHCR_PAT }}"
          ssh -o StrictHostKeyChecking=no -i key.pem $USER@$HOST "docker pull ghcr.io/ktb-community/ktb-community-be:latest"
          ssh -o StrictHostKeyChecking=no -i key.pem $USER@$HOST "docker service create -e TRUST_PROXY_URL=${{ secrets.TRUST_PROXY_URL }} -e STORAGE_SERVER_URL=${{ secrets.STORAGE_SERVER_URL }} -e SESSION_SECRET_KEY=${{ secrets.SESSION_SECRET_KEY }} -e DB_HOST=${{ secrets.DB_HOST }} -e DB_USER=${{ secrets.DB_USER }} -e DB_PORT=${{ secrets.DB_PORT }} -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} -e DB_NAME=${{ secrets.DB_NAME }} -e REDIS_HOST=${{ secrets.REDIS_HOST }} -e REDIS_PORT=${{ secrets.REDIS_PORT }} -e PORT=${{ secrets.PORT }} -p 8000:8000 --network ktb-community-overlay --replicas 3 --name ktb-community-be ghcr.io/ktb-community/ktb-community-be:latest"

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Send Discord Notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -H "Content-Type: application/json" \
               -d '{"content": "[BE] 배포가 완료되었습니다."}' \
               $DISCORD_WEBHOOK